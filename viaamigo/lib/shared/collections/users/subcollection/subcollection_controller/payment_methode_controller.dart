// ignore_for_file: avoid_print

import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:viaamigo/shared/collections/users/subcollection/services%20and%20models/payment_methodes.dart';

/// üß† Contr√¥leur GetX pour g√©rer les m√©thodes de paiement
class PaymentMethodsController extends GetxController {
  final PaymentMethodsService _service = PaymentMethodsService();

  /// Liste r√©active des m√©thodes de paiement
  final RxList<PaymentMethod> paymentMethods = <PaymentMethod>[].obs;

  /// M√©thode par d√©faut s√©lectionn√©e
  final Rx<PaymentMethod?> defaultMethod = Rx<PaymentMethod?>(null);

  /// √âtat de chargement
  final RxBool isLoading = false.obs;

  /// Message d‚Äôerreur
  final RxString error = ''.obs;

  /// Chargement initial des m√©thodes de paiement
  Future<void> loadPaymentMethods() async {
    final uid = _getUserIdOrNull();
    if (uid == null) return;

    isLoading.value = true;
    error.value = '';

    try {
      final all = await _service.getPaymentMethods(uid);
      final def = await _service.getDefaultPaymentMethod(uid);
      paymentMethods.assignAll(all);
      defaultMethod.value = def;
    } catch (e) {
      error.value = 'Erreur de chargement : ${e.toString()}';
      print(error.value);
    } finally {
      isLoading.value = false;
    }
  }

  /// Stream pour la r√©activit√© en temps r√©el (utilisable dans UI)
  Stream<List<PaymentMethod>> getPaymentMethodsStream() {
    final uid = _getUserIdOrNull();
    if (uid == null) return const Stream.empty();
    return _service.getPaymentMethodsStream(uid);
  }

  /// Ajoute une m√©thode de paiement
  Future<void> addPaymentMethod(PaymentMethod method) async {
    final uid = _getUserIdOrNull();
    if (uid == null) return;

    try {
      await _service.addPaymentMethod(uid, method);
      await loadPaymentMethods();
    } catch (e) {
      error.value = 'Ajout √©chou√© : ${e.toString()}';
      print(error.value);
    }
  }

  /// Met √† jour une m√©thode de paiement
  Future<void> updatePaymentMethod(PaymentMethod method) async {
    final uid = _getUserIdOrNull();
    if (uid == null) return;

    try {
      await _service.updatePaymentMethod(uid, method);
      await loadPaymentMethods();
    } catch (e) {
      error.value = 'Mise √† jour √©chou√©e : ${e.toString()}';
    }
  }

  /// Supprime une m√©thode
  Future<void> deletePaymentMethod(String methodId) async {
    final uid = _getUserIdOrNull();
    if (uid == null) return;

    try {
      await _service.deletePaymentMethod(uid, methodId);
      await loadPaymentMethods();
    } catch (e) {
      error.value = 'Suppression √©chou√©e : ${e.toString()}';
    }
  }

  /// D√©finit une m√©thode comme par d√©faut
  Future<void> setAsDefault(String methodId) async {
    final uid = _getUserIdOrNull();
    if (uid == null) return;

    try {
      await _service.setAsDefaultPaymentMethod(uid, methodId);
      await loadPaymentMethods();
    } catch (e) {
      error.value = 'Erreur de d√©finition du mode par d√©faut : ${e.toString()}';
    }
  }

  /// Initialise une m√©thode vide pour MVP (test/inscription)
  Future<void> createEmptyPaymentMethod() async {
    final uid = _getUserIdOrNull();
    if (uid == null) return;

    try {
      await _service.createEmptyPaymentMethod(uid);
      await loadPaymentMethods();
    } catch (e) {
      error.value = 'Erreur d\'initialisation : ${e.toString()}';
    }
  }

  /// üîç R√©cup√®re une m√©thode par son ID
  PaymentMethod? getMethodById(String id) {
    return paymentMethods.firstWhereOrNull((m) => m.id == id);
  }

  /// üîé V√©rifie si l‚Äôutilisateur a d√©j√† une m√©thode de paiement
  bool hasMethods() {
    return paymentMethods.isNotEmpty;
  }

  /// üîê R√©cup√©ration s√©curis√©e de l'UID
  String? _getUserIdOrNull() {
    return FirebaseAuth.instance.currentUser?.uid;
  }

  /// R√©initialise l‚Äô√©tat du contr√¥leur
  void reset() {
    paymentMethods.clear();
    defaultMethod.value = null;
    isLoading.value = false;
    error.value = '';
  }
}
/*import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:viaamigo/shared/controllers/payment_methods_controller.dart';
import 'package:viaamigo/shared/collections/users/subcollection/payment_methodes.dart';

void examplePaymentMethodsCrudUsage() async {
  // ‚öôÔ∏è √âtape 1 : Initialisation du contr√¥leur GetX (√† faire une fois)
  Get.put(PaymentMethodsController());
  final controller = Get.find<PaymentMethodsController>();

  // üîê R√©cup√©ration de l'utilisateur connect√©
  final userId = FirebaseAuth.instance.currentUser!.uid;

  // üß± √âtape 2 : Initialiser une m√©thode de paiement MVP √† la cr√©ation du compte
  await controller.createEmptyPaymentMethod();
  print('‚úÖ M√©thode de paiement MVP vide initialis√©e');

  // ‚ûï √âtape 3 : Ajouter une nouvelle m√©thode r√©elle (ex: carte Visa)
  final newMethod = PaymentMethod(
    id: '', // g√©n√©r√© automatiquement
    type: 'card',
    last4: '4242',
    expMonth: 12,
    expYear: 2026,
    brand: 'Visa',
    holderName: 'Jean Dupont',
    isDefault: false,
    stripePaymentMethodId: 'pm_test_visa4242',
    createdAt: DateTime.now(),
    updatedAt: DateTime.now(),
  );

  await controller.addPaymentMethod(newMethod);
  print('üí≥ Nouvelle m√©thode de paiement ajout√©e (Visa 4242)');

  // üîÅ √âtape 4 : Recharger les m√©thodes de paiement
  await controller.loadPaymentMethods();
  print('üì¶ ${controller.paymentMethods.length} m√©thode(s) charg√©e(s)');

  // üñãÔ∏è √âtape 5 : Mettre √† jour le nom du titulaire d‚Äôune carte existante
  final methodToUpdate = controller.paymentMethods.firstWhereOrNull((m) => m.brand == 'Visa');
  if (methodToUpdate != null) {
    final updatedMethod = methodToUpdate.copyWith(holderName: 'Marie Curie');
    await controller.updatePaymentMethod(updatedMethod);
    print('‚úèÔ∏è Carte mise √† jour (nouveau nom : Marie Curie)');
  }

  // ‚≠ê √âtape 6 : D√©finir une m√©thode comme par d√©faut
  final firstMethod = controller.paymentMethods.firstOrNull;
  if (firstMethod != null) {
    await controller.setAsDefault(firstMethod.id);
    print('‚≠ê Carte d√©finie comme par d√©faut : ${firstMethod.last4}');
  }

  // üîé √âtape 7 : Lire une m√©thode de paiement par ID
  if (firstMethod != null) {
    final found = controller.getMethodById(firstMethod.id);
    if (found != null) {
      print('üîç M√©thode trouv√©e : ${found.brand} ‚Äì ${found.holderName}');
    }
  }

  // üóëÔ∏è √âtape 8 : Supprimer une m√©thode sp√©cifique
  final methodToDelete = controller.paymentMethods.lastOrNull;
  if (methodToDelete != null) {
    await controller.deletePaymentMethod(methodToDelete.id);
    print('üóëÔ∏è M√©thode supprim√©e : ${methodToDelete.brand} ${methodToDelete.last4}');
  }

  // üß™ √âtape 9 : V√©rifier s‚Äôil reste des m√©thodes enregistr√©es
  final hasAny = controller.hasMethods();
  print(hasAny
      ? 'üìÇ Il reste des m√©thodes de paiement actives.'
      : 'üì≠ Plus aucune m√©thode disponible.');

  // üßπ √âtape 10 : R√©initialiser enti√®rement le contr√¥leur (utile lors d‚Äôun logout)
  controller.reset();
  print('üîÑ Contr√¥leur des paiements r√©initialis√©');
}
*/