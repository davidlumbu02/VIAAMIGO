// ignore_for_file: avoid_print

/*import 'package:get/get.dart';
import 'package:viaamigo/shared/collections/users/subcollection/services%20and%20models/devices.dart'; // Assurez-vous que le chemin d'import est correct
import 'package:viaamigo/shared/services/auth_service.dart';

/// Contr√¥leur pour g√©rer les appareils de l'utilisateur
class UserDevicesController extends GetxController {
  // Services inject√©s
  final UserDevicesService _devicesService = UserDevicesService();
  final AuthService _authService = Get.find<AuthService>();

  // Variables observables
  final RxList<UserDevice> userDevices = <UserDevice>[].obs;
  final RxBool isLoading = false.obs;
  final RxString error = ''.obs;

  @override
  void onInit() {
    super.onInit();
    // √âcouter les changements d'authentification
    ever(_authService.firebaseUser, _onUserChanged);

    // Si l'utilisateur est connect√©, charger ses appareils
    if (_authService.firebaseUser.value != null) {
      loadUserDevices();
    }
  }

  // M√©thode pour r√©agir aux changements d'utilisateur
  void _onUserChanged(user) async {
    if (user != null) {
      loadUserDevices();
    } else {
      // R√©initialiser les appareils quand l'utilisateur est d√©connect√©
      userDevices.clear();
    }
  }

  // M√©thode pour charger les appareils de l'utilisateur
  Future<void> loadUserDevices() async {
    if (_authService.firebaseUser.value == null) return;

    isLoading.value = true;
    error.value = '';

    try {
      final userId = _authService.firebaseUser.value!.uid;
      final devices = await _devicesService.getUserDevices(userId);
      userDevices.assignAll(devices);
    } catch (e) {
      error.value = 'Error loading user devices: $e';
      print('Error loading user devices: $e');
    } finally {
      isLoading.value = false;
    }
  }

  // M√©thode pour enregistrer un appareil (ajout ou mise √† jour)
  Future<String?> registerDevice(UserDevice device) async {
    if (_authService.firebaseUser.value == null) return null;

    isLoading.value = true;
    error.value = '';

    try {
      final userId = _authService.firebaseUser.value!.uid;
      final deviceId = await _devicesService.registerDevice(userId, device);
      await loadUserDevices(); // Recharger la liste
      print('User device registered successfully');
      return deviceId;
    } catch (e) {
      error.value = 'Error registering user device: $e';
      print('Error registering user device: $e');
      return null;
    } finally {
      isLoading.value = false;
    }
  }

  // M√©thode pour d√©finir l'appareil actuel
  Future<void> setCurrentDevice(String deviceId) async {
    if (_authService.firebaseUser.value == null) return;

    isLoading.value = true;
    error.value = '';

    try {
      final userId = _authService.firebaseUser.value!.uid;
      await _devicesService.setCurrentDevice(userId, deviceId);
      await loadUserDevices(); // Recharger la liste
      print('Current device set successfully');
    } catch (e) {
      error.value = 'Error setting current device: $e';
      print('Error setting current device: $e');
    } finally {
      isLoading.value = false;
    }
  }

  // M√©thode pour supprimer un appareil
  Future<void> deleteDevice(String deviceId) async {
    if (_authService.firebaseUser.value == null) return;

    isLoading.value = true;
    error.value = '';

    try {
      final userId = _authService.firebaseUser.value!.uid;
      await _devicesService.deleteDevice(userId, deviceId);
      await loadUserDevices(); // Recharger la liste
      print('User device deleted successfully');
    } catch (e) {
      error.value = 'Error deleting user device: $e';
      print('Error deleting user device: $e');
    } finally {
      isLoading.value = false;
    }
  }

  // M√©thode pour mettre √† jour le token FCM d'un appareil
  Future<void> updateFcmToken(String deviceId, String newToken) async {
    if (_authService.firebaseUser.value == null) return;

    isLoading.value = true;
    error.value = '';

    try {
      final userId = _authService.firebaseUser.value!.uid;
      await _devicesService.updateFcmToken(userId, deviceId, newToken);
      await loadUserDevices(); // Recharger la liste
      print('FCM token updated successfully');
    } catch (e) {
      error.value = 'Error updating FCM token: $e';
      print('Error updating FCM token: $e');
    } finally {
      isLoading.value = false;
    }
  }

  // M√©thode pour initialiser avec un appareil vide
  Future<void> createEmptyDeviceDoc(String userId) async {
    isLoading.value = true;
    error.value = '';

    try {
      await _devicesService.createEmptyDeviceDoc(userId);
      print('‚úÖ Appareil par d√©faut initialis√© pour l\'utilisateur: $userId');
    } catch (e) {
      error.value = 'Error initializing default device: $e';
      print('‚ùå Erreur lors de l\'initialisation de l\'appareil par d√©faut: $e');
      rethrow;
    } finally {
      isLoading.value = false;
    }
  }

  // M√©thode pour obtenir l'appareil courant
  UserDevice? getCurrentDevice() {
    try {
      return userDevices.firstWhere((device) => device.isCurrentDevice);
    } catch (e) {
      print('No current device found: $e');
      return userDevices.isNotEmpty ? userDevices.first : null;
    }
  }

  // M√©thode pour obtenir un appareil par son ID
  UserDevice? getDeviceById(String deviceId) {
    try {
      return userDevices.firstWhere((device) => device.id == deviceId);
    } catch (e) {
      print('Error finding device by ID: $e');
      return null;
    }
  }

  // M√©thode pour obtenir les appareils par plateforme
  List<UserDevice> getDevicesByPlatform(String platform) {
    return userDevices.where((device) => device.platform.toLowerCase() == platform.toLowerCase()).toList();
  }

  // M√©thode pour v√©rifier si un appareil existe avec ce token FCM
  bool deviceExistsWithToken(String fcmToken) {
    return userDevices.any((device) => device.fcmToken == fcmToken);
  }
}*/
/*import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:viaamigo/shared/controllers/user_devices_controller.dart';
import 'package:viaamigo/shared/collections/users/subcollection/devices.dart';

void exampleDeviceCrudUsage() async {
  // ‚öôÔ∏è √âtape 1 : Initialisation du controller
  Get.put(UserDevicesController());
  final controller = Get.find<UserDevicesController>();

  final userId = FirebaseAuth.instance.currentUser!.uid;

  // üì≤ √âtape 2 : Enregistrement d‚Äôun appareil (ex : apr√®s login ou update FCM)
  final newDevice = UserDevice(
    id: '', // ID g√©n√©r√© automatiquement
    fcmToken: 'FCM123456',
    platform: 'android',
    model: 'Pixel 7 Pro',
    osVersion: '13',
    appVersion: '1.1.0',
    lastUsedAt: DateTime.now(),
    ipAddress: '192.168.1.10',
    isCurrentDevice: true,
    deviceName: 'Mon Pixel Pro',
  );

  final registeredId = await controller.registerDevice(newDevice);
  print('üì± Appareil enregistr√© avec ID : $registeredId');

  // ‚úÖ √âtape 3 : D√©finir cet appareil comme appareil courant
  if (registeredId != null) {
    await controller.setCurrentDevice(registeredId);
    print('üìç Appareil courant d√©fini : $registeredId');
  }

  // üßæ √âtape 4 : Lire les appareils de l‚Äôutilisateur (localement)
  final devices = controller.userDevices;
  for (var d in devices) {
    print('üîé ${d.deviceName} ‚Äì ${d.platform} (${d.appVersion})');
  }

  // üìç √âtape 5 : R√©cup√©rer l'appareil actuellement marqu√© comme actif
  final current = controller.getCurrentDevice();
  if (current != null) {
    print('üìå Appareil actuel : ${current.deviceName}');
  }

  // üéØ √âtape 6 : Mettre √† jour un token FCM
  if (registeredId != null) {
    await controller.updateFcmToken(registeredId, 'NEW_FCM_TOKEN_999');
    print('üîÅ Token FCM mis √† jour');
  }

  // üîÑ √âtape 7 : Supprimer un ancien appareil
  if (registeredId != null) {
    await controller.deleteDevice(registeredId);
    print('üóëÔ∏è Appareil supprim√©');
  }

  // üß™ √âtape 8 : V√©rifier si un token FCM existe d√©j√†
  final exists = controller.deviceExistsWithToken('FCM123456');
  print('üîç Token FCM d√©j√† utilis√© ? $exists');

  // üß± √âtape 9 : Initialisation MVP (ex: √† la cr√©ation de compte)
  await controller.createEmptyDeviceDoc(userId);
  print('üÜï Appareil par d√©faut enregistr√©');

  // üß† √âtape 10 : Obtenir tous les appareils Android
  final androidDevices = controller.getDevicesByPlatform('android');
  print('üìä Android actifs : ${androidDevices.length}');
}
*/