// ignore_for_file: avoid_print



import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../model/user_model.dart';

/// Service centralis√© pour interagir avec la collection Firestore "users"
/// Contient des m√©thodes pour r√©cup√©rer, cr√©er, mettre √† jour et enrichir les donn√©es utilisateurs
class UserService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  /// R√©f√©rence principale √† la collection users
  CollectionReference get _usersRef => _firestore.collection('users');

  /// üîç R√©cup√®re un utilisateur par son UID
  Future<UserModel?> getUserById(String uid) async {
    try {
      final doc = await _usersRef.doc(uid).get();
      if (doc.exists) {
        return UserModel.fromFirestore(doc);
      }
      return null;
    } catch (e) {
      print('‚ùå getUserById: $e');
      rethrow;
    }
  }
  /// üîç V√©rifie si un utilisateur existe dans Firestore √† partir de son UID
Future<bool> userExists(String uid) async {
  try {
    final doc = await _usersRef.doc(uid).get();
    return doc.exists;
  } catch (e) {
    print('‚ùå userExists: $e');
    rethrow;
  }
}

  /// üîê R√©cup√®re l'utilisateur actuellement connect√© (via Firebase Auth)
  Future<UserModel?> getCurrentUser() async {
    final currentUser = _auth.currentUser;
    if (currentUser == null) return null;
    return getUserById(currentUser.uid);
  }

  /// üß± Cr√©e ou met √† jour un utilisateur Firestore (fusion des donn√©es existantes)
  Future<void> createOrUpdateUser(UserModel user) async {
    try {
      await _usersRef.doc(user.uid).set(user.toFirestore(), SetOptions(merge: true));
    } catch (e) {
      print('‚ùå createOrUpdateUser: $e');
      rethrow;
    }
  }

  /// üÜï Cr√©e un utilisateur √† partir des donn√©es minimales lors de l'inscription
  Future<void> createNewUser({
    required String uid,
    required String firstName,
    required String lastName,
    required String email,
    String? phone,
    String? profilePicture,
    required String role,
    String? provider,
    bool emailVerified = false,
    bool phoneVerified = true,
    String? language,
  }) async {
    try {
      final newUser = UserModel(
        uid: uid,
        firstName: firstName,
        lastName: lastName,
        email: email,
        phone: phone,
        profilePicture: profilePicture,
        role: role,
        provider: provider ?? 'email',
        emailVerified: emailVerified,
        phoneVerified: phoneVerified,
        acceptsTerms: true,
        acceptedTermsVersion: '1.0',
        termsAcceptedAt: Timestamp.now(),
        createdAt: DateTime.now(),
        isPro: false,
        isBanned: false,
        status: 'active',
        stats: const UserStats(),
        walletBalance: 0.0,
        blockedUsers: [],
        verificationStatus: null,
        emergencyContact: null,
        location: null,
        currentTripId: null,
        referredBy: null,
        referralCode: null,
        appVersion: null,
        devicePlatform: null,
        deactivationReason: null,
        language: language,
        lastLoginAt: null,
      );

      await createOrUpdateUser(newUser);
    } catch (e) {
      print('‚ùå createNewUser: $e');
      rethrow;
    }
  }

  /// üö´ Bloque un utilisateur en l'ajoutant √† la liste des `blocked_users`
  Future<void> blockUser(String uid, String targetUid) async {
    try {
      final doc = await _usersRef.doc(uid).get();
      final data = doc.data() as Map<String, dynamic>;
      final List<String> blocked = List<String>.from(data['blocked_users'] ?? []);

      if (!blocked.contains(targetUid)) {
        blocked.add(targetUid);
        await _usersRef.doc(uid).update({'blocked_users': blocked});
      }
    } catch (e) {
      print('‚ùå blockUser: $e');
      rethrow;
    }
  }

  /// ‚úÖ D√©bloque un utilisateur en le retirant de la liste des `blocked_users`
  Future<void> unblockUser(String uid, String targetUid) async {
    try {
      final doc = await _usersRef.doc(uid).get();
      final data = doc.data() as Map<String, dynamic>;
      final List<String> blocked = List<String>.from(data['blocked_users'] ?? []);

      if (blocked.contains(targetUid)) {
        blocked.remove(targetUid);
        await _usersRef.doc(uid).update({'blocked_users': blocked});
      }
    } catch (e) {
      print('‚ùå unblockUser: $e');
      rethrow;
    }
  }

  /// üí∞ Met √† jour le solde du portefeuille (+ ou -) et journalise dans `transactions`
  Future<void> updateWalletBalance(
    String uid,
    double amount, {
    bool isIncrement = true,
  }) async {
    try {
      final doc = await _usersRef.doc(uid).get();
      final data = doc.data() as Map<String, dynamic>;
      double current = (data['walletBalance'] ?? 0.0).toDouble();

      final newBalance = isIncrement ? current + amount : (current - amount).clamp(0.0, double.infinity);

      await _usersRef.doc(uid).update({'walletBalance': newBalance});

      await _firestore.collection('transactions').add({
        'userId': uid,
        'amount': isIncrement ? amount : -amount,
        'balanceBefore': current,
        'balanceAfter': newBalance,
        'type': isIncrement ? 'credit' : 'debit',
        'description': isIncrement
            ? 'Cr√©dit ajout√© au portefeuille'
            : 'D√©bit du portefeuille',
        'createdAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('‚ùå updateWalletBalance: $e');
      rethrow;
    }
  }

  /// üìç Met √† jour la derni√®re position connue de l'utilisateur
  Future<void> updateLocation(String uid, double lat, double lng) async {
    try {
      final GeoPoint newLocation = GeoPoint(lat, lng);
      await _usersRef.doc(uid).update({
        'location': newLocation,
        'locationUpdatedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('‚ùå updateLocation: $e');
      rethrow;
    }
  }

  /// üîÅ Active/d√©sactive un utilisateur
  Future<void> updateStatus(String uid, String status) async {
    try {
      await _usersRef.doc(uid).update({'status': status});
    } catch (e) {
      print('‚ùå updateStatus: $e');
      rethrow;
    }
  }

  /// üß† Met √† jour uniquement les champs personnalis√©s n√©cessaires
  Future<void> updateFields(String uid, Map<String, dynamic> updates) async {
    try {
      await _usersRef.doc(uid).update(updates);
    } catch (e) {
      print('‚ùå updateFields: $e');
      rethrow;
    }
  }

  /// üóë Supprime un utilisateur de Firestore (‚ö†Ô∏è ne supprime pas Auth)
  Future<void> deleteUser(String uid) async {
    try {
      await _usersRef.doc(uid).delete();
    } catch (e) {
      print('‚ùå deleteUser: $e');
      rethrow;
    }
  }
  /// üì° Stream temps r√©el des transactions utilisateur, ordonn√©es par date
Stream<List<Map<String, dynamic>>> getUserTransactionsStream(String uid) {
  return _firestore
      .collection('transactions')
      .where('userId', isEqualTo: uid)
      .orderBy('createdAt', descending: true)
      .snapshots()
      .map((snapshot) =>
          snapshot.docs.map((doc) => doc.data()).toList());
}
/// üîÅ R√©cup√®re l'historique des transactions d'un utilisateur
Future<List<Map<String, dynamic>>> getUserTransactions(String uid) async {
  try {
    final querySnapshot = await _firestore
        .collection('transactions')
        .where('userId', isEqualTo: uid)
        .orderBy('createdAt', descending: true)
        .get();

    return querySnapshot.docs.map((doc) => doc.data()).toList();
  } catch (e) {
    print('‚ùå getUserTransactions: $e');
    rethrow;
  }
}

}

/*
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';//import 'package:viaamigo/shared/collections/users/model/vehicule_model.dart';

import '../model/user_model.dart';


class UserService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // R√©f√©rence √† la collection users
  CollectionReference get _usersRef => _firestore.collection('users');

  // Obtenir un utilisateur par son ID
  Future<UserModel?> getUserById(String uid) async {
    try {
      DocumentSnapshot doc = await _usersRef.doc(uid).get();
      if (doc.exists) {
        return UserModel.fromFirestore(doc);
      }
      return null;
    } catch (e) {
      print('Error getting user: $e');
      rethrow;
    }
  }

  // Obtenir l'utilisateur actuellement connect√©
  Future<UserModel?> getCurrentUser() async {
    User? currentUser = _auth.currentUser;
    if (currentUser != null) {
      return getUserById(currentUser.uid);
    }
    return null;
  }

  // Cr√©er ou mettre √† jour un utilisateur
  Future<void> createOrUpdateUser(UserModel user) async {
    try {
      await _usersRef.doc(user.uid).set(user.toFirestore(), SetOptions(merge: true));
    } catch (e) {
      print('Error saving user: $e');
      rethrow;
    }
  }
  

  // Cr√©er un nouvel utilisateur lors de l'inscription
  Future<void> createNewUser({
    required String uid,
    required String firstName,
    required String lastName,
    required String email,
    String? phone,
    String? profilePicture,
    required String role,
    String? provider ,
    bool emailVerified = false,
    
  }) async {
    try {
      // Cr√©er l'utilisateur principal
      UserModel newUser = UserModel(
        uid: uid,
        firstName: firstName,
        lastName: lastName,
        email: email,
        phone: phone,
        role: role,
        provider: provider,
        emailVerified: emailVerified,
        phoneVerified: true,
        acceptsTerms: true,
        acceptedTermsVersion: '1.0',
        termsAcceptedAt: Timestamp.now(),
        createdAt: DateTime.now(),
        isPro: false,
        isBanned: false,
        status: 'active',
        stats: UserStats(),
        walletBalance: 0,
        blockedUsers: [],
        profilePicture: profilePicture,
        
      );


    } catch (e) {
      print('Error creating new user: $e');
      rethrow;
    }
  }

// Bloquer un utilisateur
Future<void> blockUser(String uid, String targetUid) async {
  try {
    // R√©cup√©rer la liste actuelle des utilisateurs bloqu√©s
    DocumentSnapshot userDoc = await _usersRef.doc(uid).get();
    List<String> blockedUsers = List<String>.from(
        (userDoc.data() as Map<String, dynamic>)['blocked_users'] ?? []);
    
    // V√©rifier si l'utilisateur est d√©j√† bloqu√©
    if (!blockedUsers.contains(targetUid)) {
      blockedUsers.add(targetUid);
      
      // Mettre √† jour la liste des utilisateurs bloqu√©s
      await _usersRef.doc(uid).update({
        'blocked_users': blockedUsers,
      });
    }
  } catch (e) {
    print('Error blocking user: $e');
    rethrow;
  }
}

// D√©bloquer un utilisateur
Future<void> unblockUser(String uid, String targetUid) async {
  try {
    // R√©cup√©rer la liste actuelle des utilisateurs bloqu√©s
    DocumentSnapshot userDoc = await _usersRef.doc(uid).get();
    List<String> blockedUsers = List<String>.from(
        (userDoc.data() as Map<String, dynamic>)['blocked_users'] ?? []);
    
    // Retirer l'utilisateur de la liste des bloqu√©s
    blockedUsers.remove(targetUid);
    
    // Mettre √† jour la liste des utilisateurs bloqu√©s
    await _usersRef.doc(uid).update({
      'blocked_users': blockedUsers,
    });
  } catch (e) {
    print('Error unblocking user: $e');
    rethrow;
  }
}

// Mettre √† jour le solde du portefeuille
Future<void> updateWalletBalance(String uid, double amount, {bool isIncrement = true}) async {
  try {
    DocumentSnapshot userDoc = await _usersRef.doc(uid).get();
    double currentBalance = (userDoc.data() as Map<String, dynamic>)['walletBalance'] ?? 0.0;
    
    double newBalance;
    if (isIncrement) {
      newBalance = currentBalance + amount;
    } else {
      newBalance = currentBalance - amount;
      // S'assurer que le solde ne devient pas n√©gatif
      if (newBalance < 0) newBalance = 0;
    }
    
    await _usersRef.doc(uid).update({
      'walletBalance': newBalance,
    });
    
    // Enregistrer la transaction pour historique
    await _firestore.collection('transactions').add({
      'userId': uid,
      'amount': isIncrement ? amount : -amount,
      'type': isIncrement ? 'credit' : 'debit',
      'balanceBefore': currentBalance,
      'balanceAfter': newBalance,
      'createdAt': FieldValue.serverTimestamp(),
      'description': isIncrement ? 'Cr√©dit ajout√© au portefeuille' : 'D√©bit du portefeuille',
    });
  } catch (e) {
    print('Error updating wallet balance: $e');
    rethrow;
  }
}

// Mettre √† jour la position de l'utilisateur
Future<void> updateLocation(String uid, double latitude, double longitude) async {
  try {
    GeoPoint newLocation = GeoPoint(latitude, longitude);
    
    await _usersRef.doc(uid).update({
      'location': newLocation,
      'locationUpdatedAt': FieldValue.serverTimestamp(),
    });
  } catch (e) {
    print('Error updating location: $e');
    rethrow;
  }
}
}*/